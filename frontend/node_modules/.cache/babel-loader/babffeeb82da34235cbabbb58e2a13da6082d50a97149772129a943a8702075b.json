{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  id: \"chart\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"400px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1"],"sources":["/Users/eddiediedie/Desktop/CCCA2/CCC_A2/CCCA2/frontend/src/components/Chart.vue"],"sourcesContent":["<template>\n  <div id=\"chart\" style=\"width: 100%; height: 400px;\"></div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport * as echarts from 'echarts';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/toolbox';\nimport 'echarts/lib/component/legend';\nimport 'echarts/lib/component/title';\n\nexport default {\n  data() {\n    return {\n      twi_data: null,\n      sudo_data: null,\n      twi_perc: [],\n      sudo_perc: [],\n      twi_city: [],\n      sudo_city: []\n    }\n  },\n  async mounted() {\n    const twi_scenario = this.$route.params.scenario.split('-')[0];\n    const sudo_scenario = this.$route.params.scenario.split('-')[1];\n    const state = this.$route.params.state;\n\n    console.log(twi_scenario)\n    console.log(sudo_scenario)\n    console.log(state)\n\n    try {\n      const twiResponse = await axios.get(`http://127.0.0.1:5000/api_twi_state_city/${twi_scenario}/${state}`);\n      this.twi_data = twiResponse.data.results;\n      this.twi_data.forEach(twi => {\n        this.twi_city.push(twi.city)\n      })\n      this.twi_data.forEach(twi => {\n        this.twi_perc.push(twi.percentage)\n      })\n      // console.log(this.twi_city)\n      // console.log(this.twi_perc)\n    } catch (error) {\n      console.error('Failed to fetch Twitter data:', error);\n    }\n\n    try {\n      const sudoResponse = await axios.get(`http://127.0.0.1:5000/api_sudo_state_city/${sudo_scenario}/${state}`);\n      this.sudo_data = sudoResponse.data.results;\n      this.sudo_data.forEach(sudo => {\n        this.sudo_city.push(sudo.city)\n      })\n      this.sudo_data.forEach(sudo => {\n        this.sudo_perc.push(sudo.percentage)\n      })\n      // console.log(this.sudo_perc)\n    } catch (error) {\n      console.error('Failed to fetch Sudo data:', error);\n    }\n\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      const chartDom = document.getElementById('chart');\n      const myChart = echarts.init(chartDom);\n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        legend: {\n          data: ['Twitter', 'Sudo']\n        },\n        xAxis: [\n          {\n            type: 'category',\n            data: this.twi_city,\n            axisPointer: {\n              type: 'shadow'\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            name: 'Twitter',\n            min: 0,\n            max: 100,\n            interval: 10,\n            axisLabel: {\n              formatter: '{value} %'\n            }\n          },\n          {\n            type: 'value',\n            name: 'Sudo',\n            min: 0,\n            max: 1,\n            interval: 0.1,\n            axisLabel: {\n              formatter: '{value} %'\n            }\n          }\n        ],\n        series: [\n          {\n            name: 'Evaporation',\n            type: 'bar',\n            tooltip: {\n              valueFormatter: function (value) {\n                return value + ' ml';\n              }\n            },\n            data: this.twi_perc\n          },\n          {\n            name: 'Precipitation',\n            type: 'bar',\n            tooltip: {\n              valueFormatter: function (value) {\n                return value + ' ml';\n              }\n            },\n            data: this.sudo_perc\n          }\n        ]\n      };\n        // Your chart options here\n      \n      myChart.setOption(option);\n    }\n  }\n}\n</script>\n"],"mappings":";;EACOA,EAAE,EAAC,OAAO;EAACC,KAAmC,EAAnC;IAAA;IAAA;EAAA;;;uBAAhBC,mBAAA,CAA0D,OAA1DC,UAA0D"},"metadata":{},"sourceType":"module","externalDependencies":[]}