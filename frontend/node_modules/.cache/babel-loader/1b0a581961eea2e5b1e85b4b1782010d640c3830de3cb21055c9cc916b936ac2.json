{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.concat.js\";\nexport default {\n  data: function data() {\n    return {\n      map: null,\n      circles: [],\n      keyword: null,\n      tweets: {\n        unemployment: [{\n          lat: -37.8136,\n          lng: 144.9631,\n          count: 100,\n          percentage: 0.5\n        }, {\n          lat: -33.8688,\n          lng: 151.2093,\n          count: 200,\n          percentage: 1.0\n        }, {\n          lat: -27.4698,\n          lng: 153.0251,\n          count: 50,\n          percentage: 0.25\n        }],\n        agism: [{\n          lat: -37.8136,\n          lng: 144.9631,\n          count: 50,\n          percentage: 0.25\n        }, {\n          lat: -33.8688,\n          lng: 151.2093,\n          count: 150,\n          percentage: 0.75\n        }, {\n          lat: -27.4698,\n          lng: 153.0251,\n          count: 75,\n          percentage: 0.375\n        }],\n        sexism: [{\n          lat: -37.8136,\n          lng: 144.9631,\n          count: 25,\n          percentage: 0.125\n        }, {\n          lat: -33.8688,\n          lng: 151.2093,\n          count: 75,\n          percentage: 0.375\n        }, {\n          lat: -27.4698,\n          lng: 153.0251,\n          count: 100,\n          percentage: 0.5\n        }]\n      },\n      current_scenario: null\n    };\n  },\n  mounted: function mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap: function initMap() {\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat: -25.2744,\n          lng: 133.7751\n        },\n        zoom: 4.5\n        // gestureHandling: \"none\"\n      });\n    },\n    // createCircles() {\n    //   const keywordTweets = this.tweets[this.keyword];\n    //   keywordTweets.forEach(tweet => {\n    //     const circleOptions = {\n    //       strokeColor: '#FF0000',\n    //       strokeOpacity: 0.8,\n    //       strokeWeight: 2,\n    //       fillColor: '#FF0000',\n    //       fillOpacity: 0.35,\n    //       map: this.map,\n    //       center: new google.maps.LatLng(tweet.lat, tweet.lng),\n    //       radius: tweet.count * 1000 // convert count to meters\n    //     };\n    //     const circle = new google.maps.Circle(circleOptions);\n    //     circle.addListener('mouseover', () => {\n    //       this.showInfoWindow(circle, tweet.count, tweet.percentage);\n    //     });\n    //     circle.addListener('mouseout', () => {\n    //       this.hideInfoWindow();\n    //     });\n    //     this.circles.push(circle);\n    //   });\n    // },\n    createCircles: function createCircles() {\n      var _this = this;\n      var keywordTweets = this.tweets[this.keyword];\n      var zoom = this.map.getZoom();\n      keywordTweets.forEach(function (tweet) {\n        var percentage = tweet.percentage;\n        var count = tweet.count;\n        var radius = 5000 * Math.pow(2, zoom - 6) * Math.sqrt(percentage * count);\n        var circle = new google.maps.Circle({\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n          map: _this.map,\n          center: {\n            lat: tweet.lat,\n            lng: tweet.lng\n          },\n          radius: radius\n        });\n        _this.circles.push(circle);\n      });\n    },\n    showInfoWindow: function showInfoWindow(circle, count, percentage) {\n      var infoWindow = new google.maps.InfoWindow({\n        content: \"Count: \".concat(count, \"<br>Percentage: \").concat(percentage)\n      });\n      infoWindow.setPosition(circle.getCenter());\n      infoWindow.open(this.map);\n      this.infoWindow = infoWindow;\n    },\n    hideInfoWindow: function hideInfoWindow() {\n      if (this.infoWindow) {\n        this.infoWindow.close();\n      }\n    },\n    onKeywordClick: function onKeywordClick(keyword) {\n      this.keyword = keyword;\n      if (this.keyword !== this.current_scenario) {\n        this.clearCircles();\n        this.createCircles();\n        this.current_scenario = this.keyword;\n      } else {\n        this.clearCircles();\n        this.current_scenario = null;\n      }\n    },\n    clearCircles: function clearCircles() {\n      this.circles.forEach(function (circle) {\n        circle.setMap(null);\n      });\n      this.circles = [];\n    }\n  }\n};","map":{"version":3,"names":["data","map","circles","keyword","tweets","unemployment","lat","lng","count","percentage","agism","sexism","current_scenario","mounted","initMap","methods","google","maps","Map","document","getElementById","center","zoom","createCircles","_this","keywordTweets","getZoom","forEach","tweet","radius","Math","pow","sqrt","circle","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","push","showInfoWindow","infoWindow","InfoWindow","content","concat","setPosition","getCenter","open","hideInfoWindow","close","onKeywordClick","clearCircles","setMap"],"sources":["/Users/eddiediedie/Desktop/CCC_A2/CCCA2/frontend/src/components/test.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"map\" style=\"height: 82%\"></div>\r\n    <div class=\"scenario\">\r\n      <button @click=\"onKeywordClick('unemployment')\">Unemployment</button>\r\n      <button @click=\"onKeywordClick('agism')\">Agism</button>\r\n      <button @click=\"onKeywordClick('sexism')\">Sexism</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      circles: [],\r\n      keyword: null,\r\n      tweets: {\r\n        unemployment: [\r\n          { lat: -37.8136, lng: 144.9631, count: 100, percentage: 0.5 },\r\n          { lat: -33.8688, lng: 151.2093, count: 200, percentage: 1.0 },\r\n          { lat: -27.4698, lng: 153.0251, count: 50, percentage: 0.25 }\r\n        ],\r\n        agism: [\r\n          { lat: -37.8136, lng: 144.9631, count: 50, percentage: 0.25 },\r\n          { lat: -33.8688, lng: 151.2093, count: 150, percentage: 0.75 },\r\n          { lat: -27.4698, lng: 153.0251, count: 75, percentage: 0.375 }\r\n        ],\r\n        sexism: [\r\n          { lat: -37.8136, lng: 144.9631, count: 25, percentage: 0.125 },\r\n          { lat: -33.8688, lng: 151.2093, count: 75, percentage: 0.375 },\r\n          { lat: -27.4698, lng: 153.0251, count: 100, percentage: 0.5 }\r\n        ]\r\n      },\r\n      current_scenario: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = new google.maps.Map(document.getElementById('map'), {\r\n        center: { lat: -25.2744, lng: 133.7751 },\r\n        zoom: 4.5,\r\n        // gestureHandling: \"none\"\r\n      });\r\n    },\r\n    // createCircles() {\r\n    //   const keywordTweets = this.tweets[this.keyword];\r\n    //   keywordTweets.forEach(tweet => {\r\n    //     const circleOptions = {\r\n    //       strokeColor: '#FF0000',\r\n    //       strokeOpacity: 0.8,\r\n    //       strokeWeight: 2,\r\n    //       fillColor: '#FF0000',\r\n    //       fillOpacity: 0.35,\r\n    //       map: this.map,\r\n    //       center: new google.maps.LatLng(tweet.lat, tweet.lng),\r\n    //       radius: tweet.count * 1000 // convert count to meters\r\n    //     };\r\n    //     const circle = new google.maps.Circle(circleOptions);\r\n    //     circle.addListener('mouseover', () => {\r\n    //       this.showInfoWindow(circle, tweet.count, tweet.percentage);\r\n    //     });\r\n    //     circle.addListener('mouseout', () => {\r\n    //       this.hideInfoWindow();\r\n    //     });\r\n    //     this.circles.push(circle);\r\n    //   });\r\n    // },\r\n    createCircles() {\r\n      const keywordTweets = this.tweets[this.keyword];\r\n      const zoom = this.map.getZoom();\r\n      keywordTweets.forEach(tweet => {\r\n        const percentage = tweet.percentage;\r\n        const count = tweet.count;\r\n        const radius = 5000 * Math.pow(2, (zoom - 6)) * Math.sqrt(percentage * count);\r\n        const circle = new google.maps.Circle({\r\n          strokeColor: '#FF0000',\r\n          strokeOpacity: 0.8,\r\n          strokeWeight: 2,\r\n          fillColor: '#FF0000',\r\n          fillOpacity: 0.35,\r\n          map: this.map,\r\n          center: { lat: tweet.lat, lng: tweet.lng },\r\n          radius: radius\r\n        });\r\n        this.circles.push(circle);\r\n      });\r\n    },\r\n\r\n    showInfoWindow(circle, count, percentage) {\r\n      const infoWindow = new google.maps.InfoWindow({\r\n        content: `Count: ${count}<br>Percentage: ${percentage}`\r\n      });\r\n      infoWindow.setPosition(circle.getCenter());\r\n      infoWindow.open(this.map);\r\n      this.infoWindow = infoWindow;\r\n    },\r\n    hideInfoWindow() {\r\n      if (this.infoWindow) {\r\n        this.infoWindow.close();\r\n      }\r\n    },\r\n    onKeywordClick(keyword) {\r\n      this.keyword = keyword;\r\n      \r\n      if (this.keyword !== this.current_scenario) {\r\n        this.clearCircles();\r\n        this.createCircles();\r\n        this.current_scenario = this.keyword;\r\n      }\r\n      else {\r\n        this.clearCircles();\r\n        this.current_scenario = null\r\n      }\r\n    },\r\n    clearCircles() {\r\n      this.circles.forEach(circle => {\r\n        circle.setMap(null);\r\n      });\r\n      this.circles = [];\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#map {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 82%;\r\n    left: 0px;\r\n    bottom: 0px;\r\n    z-index: 1;\r\n}\r\n.scenario {\r\n    position: relative;\r\n}\r\n.scenario button {\r\n    display: inline-block;\r\n    position: relative;\r\n    background: white;\r\n    border: 1px solid #d9d9d9;\r\n    padding: 10px 20px;\r\n    border-radius: 32px;\r\n    z-index: 2;\r\n    top: 15px;\r\n    margin-right: 10px;\r\n    font-size: 1em;\r\n    font-family: arial;\r\n    font-weight: bold;\r\n    color: #000000;\r\n}\r\n.scenario button:hover {\r\n  cursor: pointer;\r\n  background: #eee;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}