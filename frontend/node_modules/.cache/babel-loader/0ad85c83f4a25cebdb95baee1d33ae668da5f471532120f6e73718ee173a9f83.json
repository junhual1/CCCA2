{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nexport default {\n  mounted: function mounted() {\n    // Create a new map centered on Victoria, Australia\n    var map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: -37.4713,\n        lng: 144.7852\n      },\n      zoom: 7\n    });\n\n    // Define the coordinates and percentages of the Significant Urban Areas in Victoria\n    var areas = [{\n      lat: -36.7580,\n      lng: 144.2840,\n      percentage: 25\n    }, {\n      lat: -36.7580,\n      lng: 144.2840,\n      percentage: 35\n    } // add more areas here    \n    ];\n\n    // Define the bounds of Victoria\n    var victoriaBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-39.155, 140.962), new google.maps.LatLng(-33.980, 149.972));\n\n    // Define the number of rows and columns in the grid\n    var numRows = 50;\n    var numCols = 50;\n\n    // Calculate the size of each cell in the grid\n    var cellSize = {\n      lat: (victoriaBounds.getNorthEast().lat() - victoriaBounds.getSouthWest().lat()) / numRows,\n      lng: (victoriaBounds.getNorthEast().lng() - victoriaBounds.getSouthWest().lng()) / numCols\n    };\n\n    // Create an empty array to hold the heatmap data\n    var heatmapData = [];\n\n    // Loop over the rows and columns in the grid\n    for (var i = 0; i < numRows; i++) {\n      var _loop = function _loop() {\n        // Calculate the coordinates of the center of the current cell in the grid\n        var lat = victoriaBounds.getSouthWest().lat() + (i + 0.5) * cellSize.lat;\n        var lng = victoriaBounds.getSouthWest().lng() + (j + 0.5) * cellSize.lng;\n\n        // Calculate the percentage of unemployment mentions for the current cell\n        var percentage = 0;\n        areas.forEach(function (area) {\n          var areaBounds = new google.maps.LatLngBounds(new google.maps.LatLng(area.lat - 0.5 * cellSize.lat, area.lng - 0.5 * cellSize.lng), new google.maps.LatLng(area.lat + 0.5 * cellSize.lat, area.lng + 0.5 * cellSize.lng));\n          if (areaBounds.contains(new google.maps.LatLng(lat, lng))) {\n            percentage += area.percentage;\n          }\n        });\n        percentage /= areas.length;\n\n        // Add the LatLng and percentage data to the heatmap data array\n        heatmapData.push({\n          location: new google.maps.LatLng(lat, lng),\n          weight: percentage\n        });\n      };\n      for (var j = 0; j < numCols; j++) {\n        _loop();\n      }\n    }\n\n    // Create a heatmap layer with the heatmap data\n    var heatmap = new google.maps.visualization.HeatmapLayer({\n      data: heatmapData,\n      map: map,\n      radius: 20,\n      gradient: ['rgba(0, 255, 255, 0)', 'rgba(0, 255, 255, 1)', 'rgba(0, 191, 255, 1)', 'rgba(0, 127, 255, 1)', 'rgba(0, 63, 255, 1)', 'rgba(0, 0, 255, 1)', 'rgba(0, 0, 223, 1)', 'rgba(0, 0, 191, 1)', 'rgba(0, 0, 159, 1)', 'rgba(0, 0, 127, 1)', 'rgba(63, 0, 91, 1)', 'rgba(127, 0, 63, 1)', 'rgba(191, 0, 31, 1)', 'rgba(255, 0, 0, 1)']\n    });\n  }\n};","map":{"version":3,"names":["mounted","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","areas","percentage","victoriaBounds","LatLngBounds","LatLng","numRows","numCols","cellSize","getNorthEast","getSouthWest","heatmapData","i","_loop","j","forEach","area","areaBounds","contains","length","push","location","weight","heatmap","visualization","HeatmapLayer","data","radius","gradient"],"sources":["/Users/eddiediedie/Desktop/CCC_A2/CCCA2/frontend/src/views/Results.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    // Create a new map centered on Victoria, Australia\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: -37.4713, lng: 144.7852 },\n      zoom: 7\n    });\n\n    // Define the coordinates and percentages of the Significant Urban Areas in Victoria\n    const areas = [      {lat: -36.7580, lng: 144.2840, percentage: 25},      {lat: -36.7580, lng: 144.2840, percentage: 35},      // add more areas here    \n                  ];\n\n    // Define the bounds of Victoria\n    const victoriaBounds = new google.maps.LatLngBounds(\n      new google.maps.LatLng(-39.155, 140.962),\n      new google.maps.LatLng(-33.980, 149.972)\n    );\n\n    // Define the number of rows and columns in the grid\n    const numRows = 50;\n    const numCols = 50;\n\n    // Calculate the size of each cell in the grid\n    const cellSize = {\n      lat: (victoriaBounds.getNorthEast().lat() - victoriaBounds.getSouthWest().lat()) / numRows,\n      lng: (victoriaBounds.getNorthEast().lng() - victoriaBounds.getSouthWest().lng()) / numCols\n    };\n\n    // Create an empty array to hold the heatmap data\n    const heatmapData = [];\n\n    // Loop over the rows and columns in the grid\n    for (let i = 0; i < numRows; i++) {\n      for (let j = 0; j < numCols; j++) {\n        // Calculate the coordinates of the center of the current cell in the grid\n        const lat = victoriaBounds.getSouthWest().lat() + (i + 0.5) * cellSize.lat;\n        const lng = victoriaBounds.getSouthWest().lng() + (j + 0.5) * cellSize.lng;\n\n        // Calculate the percentage of unemployment mentions for the current cell\n        let percentage = 0;\n        areas.forEach((area) => {\n          const areaBounds = new google.maps.LatLngBounds(\n            new google.maps.LatLng(area.lat - 0.5 * cellSize.lat, area.lng - 0.5 * cellSize.lng),\n            new google.maps.LatLng(area.lat + 0.5 * cellSize.lat, area.lng + 0.5 * cellSize.lng)\n          );\n          if (areaBounds.contains(new google.maps.LatLng(lat, lng))) {\n            percentage += area.percentage;\n          }\n        });\n        percentage /= areas.length;\n\n        // Add the LatLng and percentage data to the heatmap data array\n        heatmapData.push({location: new google.maps.LatLng(lat, lng), weight: percentage});\n      }\n    }\n\n    // Create a heatmap layer with the heatmap data\n    const heatmap = new google.maps.visualization.HeatmapLayer({\n        data: heatmapData,\n        map: map,\n        radius: 20,\n        gradient: [\n            'rgba(0, 255, 255, 0)',\n            'rgba(0, 255, 255, 1)',\n            'rgba(0, 191, 255, 1)',\n            'rgba(0, 127, 255, 1)',\n            'rgba(0, 63, 255, 1)',\n            'rgba(0, 0, 255, 1)',\n            'rgba(0, 0, 223, 1)',\n            'rgba(0, 0, 191, 1)',\n            'rgba(0, 0, 159, 1)',\n            'rgba(0, 0, 127, 1)',\n            'rgba(63, 0, 91, 1)',\n            'rgba(127, 0, 63, 1)',\n            'rgba(191, 0, 31, 1)',\n            'rgba(255, 0, 0, 1)'\n        ]\n        });\n  }\n};\n</script>\n\n\n<style>\n#map {\n  height: 500px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}