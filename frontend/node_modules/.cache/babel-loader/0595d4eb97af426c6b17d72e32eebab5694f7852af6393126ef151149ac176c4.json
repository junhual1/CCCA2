{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.concat.js\";\nexport default {\n  data: function data() {\n    return {\n      test: null,\n      map: null,\n      circles: [],\n      keyword: null,\n      // tweets: {\n      //   employment: [\n      //     { lat: -37.8136, lng: 144.9631, count: 100, percentage: 0.5 },\n      //     { lat: -33.8688, lng: 151.2093, count: 200, percentage: 1.0 },\n      //     { lat: -27.4698, lng: 153.0251, count: 50, percentage: 0.25 }\n      //   ],\n      //   agism: [\n      //     { lat: -37.8136, lng: 144.9631, count: 50, percentage: 0.25 },\n      //     { lat: -33.8688, lng: 151.2093, count: 150, percentage: 0.75 },\n      //     { lat: -27.4698, lng: 153.0251, count: 75, percentage: 0.375 }\n      //   ],\n      //   sexism: [\n      //     { lat: -37.8136, lng: 144.9631, count: 25, percentage: 0.125 },\n      //     { lat: -33.8688, lng: 151.2093, count: 75, percentage: 0.375 },\n      //     { lat: -27.4698, lng: 153.0251, count: 100, percentage: 0.5 }\n      //   ]\n      // },\n      current_scenario: null\n    };\n  },\n  mounted: function mounted() {\n    this.initMap();\n    // fetch('http://localhost:3000/scenario')\n    //   .then(res => res.json())\n    //   .then(data => this.test = data)\n    //   .catch(err => console.log(err.message))\n  },\n\n  methods: {\n    initMap: function initMap() {\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat: -25.2744,\n          lng: 133.7751\n        },\n        zoom: 4.5,\n        gestureHandling: \"none\",\n        disableDefaultUI: true\n      });\n    },\n    createCircles: function createCircles() {\n      var _this = this;\n      // const keywordTweets = this.tweets[this.keyword];\n      var keywordTweets = this.test[this.keyword];\n      keywordTweets.forEach(function (tweet) {\n        var circleOptions = {\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n          map: _this.map,\n          center: new google.maps.LatLng(tweet.lat, tweet.lng),\n          radius: tweet.count * 1000 // convert count to meters\n        };\n\n        var circle = new google.maps.Circle(circleOptions);\n        circle.addListener('mouseover', function () {\n          _this.showInfoWindow(circle, tweet.count, tweet.percentage);\n        });\n        circle.addListener('mouseout', function () {\n          _this.hideInfoWindow();\n        });\n        _this.circles.push(circle);\n      });\n    },\n    showInfoWindow: function showInfoWindow(circle, count, percentage) {\n      var infoWindow = new google.maps.InfoWindow({\n        content: \"Count: \".concat(count, \"<br>Percentage: \").concat(percentage),\n        disableAutoPan: true\n      });\n      infoWindow.setPosition(circle.getCenter());\n      infoWindow.open(this.map);\n      this.infoWindow = infoWindow;\n    },\n    hideInfoWindow: function hideInfoWindow() {\n      if (this.infoWindow) {\n        this.infoWindow.close();\n      }\n    },\n    onKeywordClick: function onKeywordClick(keyword) {\n      this.keyword = keyword;\n      if (this.keyword !== this.current_scenario) {\n        this.clearCircles();\n        this.createCircles();\n        this.current_scenario = this.keyword;\n      } else {\n        this.clearCircles();\n        this.current_scenario = null;\n      }\n    },\n    clearCircles: function clearCircles() {\n      this.circles.forEach(function (circle) {\n        circle.setMap(null);\n      });\n      this.circles = [];\n    }\n  }\n};","map":{"version":3,"names":["data","test","map","circles","keyword","current_scenario","mounted","initMap","methods","google","maps","Map","document","getElementById","center","lat","lng","zoom","gestureHandling","disableDefaultUI","createCircles","_this","keywordTweets","forEach","tweet","circleOptions","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","LatLng","radius","count","circle","Circle","addListener","showInfoWindow","percentage","hideInfoWindow","push","infoWindow","InfoWindow","content","concat","disableAutoPan","setPosition","getCenter","open","close","onKeywordClick","clearCircles","setMap"],"sources":["/Users/eddiediedie/Desktop/CCCA2/CCC_A2/CCCA2/frontend/src/components/test.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <div>\r\n      {{ this.test }}\r\n    </div> -->\r\n    <div id=\"map\" style=\"height: 82%\"></div>\r\n    <div class=\"scenario\">\r\n      <button @click=\"onKeywordClick('employment')\">Employment</button>\r\n      <button @click=\"onKeywordClick('agism')\">Agism</button>\r\n      <button @click=\"onKeywordClick('sexism')\">Sexism</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      test: null,\r\n      map: null,\r\n      circles: [],\r\n      keyword: null,\r\n      // tweets: {\r\n      //   employment: [\r\n      //     { lat: -37.8136, lng: 144.9631, count: 100, percentage: 0.5 },\r\n      //     { lat: -33.8688, lng: 151.2093, count: 200, percentage: 1.0 },\r\n      //     { lat: -27.4698, lng: 153.0251, count: 50, percentage: 0.25 }\r\n      //   ],\r\n      //   agism: [\r\n      //     { lat: -37.8136, lng: 144.9631, count: 50, percentage: 0.25 },\r\n      //     { lat: -33.8688, lng: 151.2093, count: 150, percentage: 0.75 },\r\n      //     { lat: -27.4698, lng: 153.0251, count: 75, percentage: 0.375 }\r\n      //   ],\r\n      //   sexism: [\r\n      //     { lat: -37.8136, lng: 144.9631, count: 25, percentage: 0.125 },\r\n      //     { lat: -33.8688, lng: 151.2093, count: 75, percentage: 0.375 },\r\n      //     { lat: -27.4698, lng: 153.0251, count: 100, percentage: 0.5 }\r\n      //   ]\r\n      // },\r\n      current_scenario: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    // fetch('http://localhost:3000/scenario')\r\n    //   .then(res => res.json())\r\n    //   .then(data => this.test = data)\r\n    //   .catch(err => console.log(err.message))\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = new google.maps.Map(document.getElementById('map'), {\r\n        center: { lat: -25.2744, lng: 133.7751 },\r\n        zoom: 4.5,\r\n        gestureHandling: \"none\",\r\n        disableDefaultUI: true\r\n      });\r\n    },\r\n    createCircles() {\r\n      // const keywordTweets = this.tweets[this.keyword];\r\n      const keywordTweets = this.test[this.keyword];\r\n      keywordTweets.forEach(tweet => {\r\n        const circleOptions = {\r\n          strokeColor: '#FF0000',\r\n          strokeOpacity: 0.8,\r\n          strokeWeight: 2,\r\n          fillColor: '#FF0000',\r\n          fillOpacity: 0.35,\r\n          map: this.map,\r\n          center: new google.maps.LatLng(tweet.lat, tweet.lng),\r\n          radius: tweet.count * 1000 // convert count to meters\r\n        };\r\n        const circle = new google.maps.Circle(circleOptions);\r\n        circle.addListener('mouseover', () => {\r\n          this.showInfoWindow(circle, tweet.count, tweet.percentage);\r\n        });\r\n        circle.addListener('mouseout', () => {\r\n          this.hideInfoWindow();\r\n        });\r\n        this.circles.push(circle);\r\n      });\r\n    },\r\n    showInfoWindow(circle, count, percentage) {\r\n      const infoWindow = new google.maps.InfoWindow({\r\n        content: `Count: ${count}<br>Percentage: ${percentage}`,\r\n        disableAutoPan: true\r\n      });\r\n      infoWindow.setPosition(circle.getCenter());\r\n      infoWindow.open(this.map);\r\n      this.infoWindow = infoWindow;\r\n    },\r\n    hideInfoWindow() {\r\n      if (this.infoWindow) {\r\n        this.infoWindow.close();\r\n      }\r\n    },\r\n    onKeywordClick(keyword) {\r\n      this.keyword = keyword;\r\n      \r\n      if (this.keyword !== this.current_scenario) {\r\n        this.clearCircles();\r\n        this.createCircles();\r\n        this.current_scenario = this.keyword;\r\n      }\r\n      else {\r\n        this.clearCircles();\r\n        this.current_scenario = null\r\n      }\r\n    },\r\n    clearCircles() {\r\n      this.circles.forEach(circle => {\r\n        circle.setMap(null);\r\n      });\r\n      this.circles = [];\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#map {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 82%;\r\n    left: 0px;\r\n    bottom: 0px;\r\n    z-index: 1;\r\n}\r\n.scenario {\r\n    position: relative;\r\n}\r\n.scenario button {\r\n    display: inline-block;\r\n    position: relative;\r\n    background: white;\r\n    border: 1px solid #d9d9d9;\r\n    padding: 10px 20px;\r\n    border-radius: 32px;\r\n    z-index: 2;\r\n    top: 15px;\r\n    margin-right: 10px;\r\n    font-size: 1em;\r\n    font-family: arial;\r\n    font-weight: bold;\r\n    color: #000000;\r\n}\r\n.scenario button:hover {\r\n  cursor: pointer;\r\n  background: #eee;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}