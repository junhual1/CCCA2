{"ast":null,"code":"/**\n * @class MapElementMixin\n *\n * Add a inject object to inject $mapPromise and a provide function to the\n * component this function save the returned Google Maps object in the $map\n * property after the $mapPromise is resolved.\n *\n * ## The mixin code:\n * ```js\n  export default {\n    inject: {\n      $mapPromise: { default: 'abcdef' },\n    },\n    provide() {\n      this.$mapPromise.then((map) => {\n        this.$map = map;\n      });\n\n      return {};\n    },\n  };\n * ```\n *\n * @property $mapPromise - The map property that should return the `$map`.<br>\n *           **Note**: although this mixin is not \"providing\" anything,\n *           components' expect the `$map` property to be present on the component.\n *           In order for that to happen, this mixin must intercept the `$mapPromise\n *           .then(() => {})` first before its component does so.\n *\n *           Since a `provide()` on a mixin is executed before a `provide()` on the\n *           component, putting this code in `provide()` ensures that the `$map` is\n *           already set by the time the component's `provide()` is called.\n * @property $map - The Google map (valid only after the promise (`$mapPromise`) returns)\n */\nvar mapElementMixin = {\n  inject: {\n    $mapPromise: {\n      \"default\": 'abcdef'\n    }\n  },\n  provide: function provide() {\n    var _this = this;\n\n    /**\n     * **Note**: although this mixin is not \"providing\" anything,\n     * components' expect the `$map` property to be present on the component.\n     * In order for that to happen, this mixin must intercept the `$mapPromise\n     * .then(() => {})` first before its component does so.\n     *\n     * Since a `provide()` on a mixin is executed before a `provide()` on the\n     * component, putting this code in `provide()` ensures that the `$map` is\n     * already set by the time the component's `provide()` is called.\n     */\n    this.$mapPromise.then(function (map) {\n      _this.$map = map;\n    });\n    return {};\n  }\n};\nexport { mapElementMixin as default };","map":{"version":3,"names":["mapElementMixin","inject","$mapPromise","provide","_this","then","map","$map","default"],"sources":["/Users/eddiediedie/Desktop/CCC_A2/CCCA2/node_modules/gmap-vue/dist/esm/mixins/map-element.js"],"sourcesContent":["/**\n * @class MapElementMixin\n *\n * Add a inject object to inject $mapPromise and a provide function to the\n * component this function save the returned Google Maps object in the $map\n * property after the $mapPromise is resolved.\n *\n * ## The mixin code:\n * ```js\n  export default {\n    inject: {\n      $mapPromise: { default: 'abcdef' },\n    },\n    provide() {\n      this.$mapPromise.then((map) => {\n        this.$map = map;\n      });\n\n      return {};\n    },\n  };\n * ```\n *\n * @property $mapPromise - The map property that should return the `$map`.<br>\n *           **Note**: although this mixin is not \"providing\" anything,\n *           components' expect the `$map` property to be present on the component.\n *           In order for that to happen, this mixin must intercept the `$mapPromise\n *           .then(() => {})` first before its component does so.\n *\n *           Since a `provide()` on a mixin is executed before a `provide()` on the\n *           component, putting this code in `provide()` ensures that the `$map` is\n *           already set by the time the component's `provide()` is called.\n * @property $map - The Google map (valid only after the promise (`$mapPromise`) returns)\n */\nvar mapElementMixin = {\n  inject: {\n    $mapPromise: {\n      default: 'abcdef'\n    }\n  },\n  provide: function provide() {\n    var _this = this;\n\n    /**\n     * **Note**: although this mixin is not \"providing\" anything,\n     * components' expect the `$map` property to be present on the component.\n     * In order for that to happen, this mixin must intercept the `$mapPromise\n     * .then(() => {})` first before its component does so.\n     *\n     * Since a `provide()` on a mixin is executed before a `provide()` on the\n     * component, putting this code in `provide()` ensures that the `$map` is\n     * already set by the time the component's `provide()` is called.\n     */\n    this.$mapPromise.then(function (map) {\n      _this.$map = map;\n    });\n    return {};\n  }\n};\n\nexport { mapElementMixin as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAG;EACpBC,MAAM,EAAE;IACNC,WAAW,EAAE;MACX,WAAS;IACX;EACF,CAAC;EACDC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;IAC1B,IAAIC,KAAK,GAAG,IAAI;;IAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACF,WAAW,CAACG,IAAI,CAAC,UAAUC,GAAG,EAAE;MACnCF,KAAK,CAACG,IAAI,GAAGD,GAAG;IAClB,CAAC,CAAC;IACF,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAED,SAASN,eAAe,IAAIQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}